{"ast":null,"code":"var _jsxFileName = \"/Users/mihaibadea/pre-sale-functional/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { connect } from \"./redux/blockchain/blockchainActions\";\nimport { fetchData } from \"./redux/data/dataActions\"; // import * as s from \"./styles/globalStyles\";\n// import styled from \"styled-components\";\n\nimport { useMoralis } from \"react-moralis\"; // import Moralis from \"moralis/types\";\n// import '../public/config/the-nftist.webflow.css'\n// import './styles/the-nftist.webflow.css'\n// import Background from \"./images/PTRNS.png\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst truncate = (input, len) => input.length > len ? `${input.substring(0, len)}...` : input;\n\nfunction App() {\n  _s();\n\n  const {\n    authenticate,\n    isAuthenticated,\n    user,\n    Moralis\n  } = useMoralis(); // if (isAuthenticated) \n  //   {\n  //     console.log(\"you are authenticated\")\n  //     console.log(Moralis.User.current())\n  //   }\n\n  const Whitelist = Moralis.Object.extend(\"whiteList\");\n  const dispatch = useDispatch();\n  const blockchain = useSelector(state => state.blockchain);\n  const data = useSelector(state => state.data);\n  const [claimingNft, setClaimingNft] = useState(false);\n  const [feedback, setFeedback] = useState(`Click buy to mint your NFT.`);\n  const [mintAmount, setMintAmount] = useState(1);\n  const [numberWhiteListed, setWhitelisted] = useState(1);\n  const [CONFIG, SET_CONFIG] = useState({\n    CONTRACT_ADDRESS: \"\",\n    SCAN_LINK: \"\",\n    NETWORK: {\n      NAME: \"\",\n      SYMBOL: \"\",\n      ID: 0\n    },\n    NFT_NAME: \"\",\n    SYMBOL: \"\",\n    MAX_SUPPLY: 1,\n    WEI_COST: 0,\n    DISPLAY_COST: 0,\n    GAS_LIMIT: 0,\n    MARKETPLACE: \"\",\n    MARKETPLACE_LINK: \"\",\n    SHOW_BACKGROUND: false\n  });\n\n  const claimNFTs = () => {\n    let cost = CONFIG.WEI_COST;\n    let gasLimit = CONFIG.GAS_LIMIT;\n    let totalCostWei = String(cost * mintAmount);\n    let totalGasLimit = String(gasLimit * mintAmount);\n    console.log(\"Cost: \", totalCostWei);\n    console.log(\"Gas limit: \", totalGasLimit);\n    setFeedback(`Minting your ${CONFIG.NFT_NAME}...`);\n    setClaimingNft(true);\n    blockchain.smartContract.methods.mint(mintAmount).send({\n      gasLimit: String(totalGasLimit),\n      to: CONFIG.CONTRACT_ADDRESS,\n      from: blockchain.account,\n      value: totalCostWei\n    }).once(\"error\", err => {\n      console.log(err);\n      setFeedback(\"Sorry, something went wrong please try again later.\");\n      setClaimingNft(false);\n    }).then(receipt => {\n      console.log(receipt);\n      setFeedback(`WOW, the ${CONFIG.NFT_NAME} is yours! go visit Opensea.io to view it.`);\n      setClaimingNft(false);\n      dispatch(fetchData(blockchain.account));\n    });\n  };\n\n  const decrementMintAmount = () => {\n    let newMintAmount = mintAmount - 1;\n\n    if (newMintAmount < 1) {\n      newMintAmount = 1;\n    }\n\n    setMintAmount(newMintAmount);\n  };\n\n  const checkIfWhiteListed = async () => {\n    // console.log((blockchain.account))\n    const query = new Moralis.Query(Whitelist);\n    query.equalTo(\"whiteListAddress\", \"xxxx\");\n    const result = await query.find();\n    console.log(result);\n    console.log(result.length); // if(result.length != 0)\n    //   return 0;\n    // else\n    //   return 1;\n\n    setWhitelisted(result.length);\n  };\n\n  const incrementMintAmount = () => {\n    let newMintAmount = mintAmount + 1;\n\n    if (newMintAmount > 10) {\n      newMintAmount = 10;\n    }\n\n    setMintAmount(newMintAmount);\n  };\n\n  const getData = () => {\n    if (blockchain.account !== \"\" && blockchain.smartContract !== null) {\n      dispatch(fetchData(blockchain.account));\n    }\n  };\n\n  const getConfig = async () => {\n    const configResponse = await fetch(\"/config/config.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    });\n    const config = await configResponse.json();\n    SET_CONFIG(config);\n  };\n\n  useEffect(() => {\n    getConfig();\n  }, []);\n  useEffect(() => {\n    getData();\n  }, [blockchain.account]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"x\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 4\n  }, this);\n}\n\n_s(App, \"CphE9AKhvdr3Fs9XAYCGz9WaGKA=\", false, function () {\n  return [useMoralis, useDispatch, useSelector, useSelector];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/mihaibadea/pre-sale-functional/src/App.js"],"names":["React","useEffect","useState","useRef","useDispatch","useSelector","connect","fetchData","useMoralis","truncate","input","len","length","substring","App","authenticate","isAuthenticated","user","Moralis","Whitelist","Object","extend","dispatch","blockchain","state","data","claimingNft","setClaimingNft","feedback","setFeedback","mintAmount","setMintAmount","numberWhiteListed","setWhitelisted","CONFIG","SET_CONFIG","CONTRACT_ADDRESS","SCAN_LINK","NETWORK","NAME","SYMBOL","ID","NFT_NAME","MAX_SUPPLY","WEI_COST","DISPLAY_COST","GAS_LIMIT","MARKETPLACE","MARKETPLACE_LINK","SHOW_BACKGROUND","claimNFTs","cost","gasLimit","totalCostWei","String","totalGasLimit","console","log","smartContract","methods","mint","send","to","from","account","value","once","err","then","receipt","decrementMintAmount","newMintAmount","checkIfWhiteListed","query","Query","equalTo","result","find","incrementMintAmount","getData","getConfig","configResponse","fetch","headers","Accept","config","json"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { connect } from \"./redux/blockchain/blockchainActions\";\nimport { fetchData } from \"./redux/data/dataActions\";\n// import * as s from \"./styles/globalStyles\";\n// import styled from \"styled-components\";\nimport { useMoralis } from \"react-moralis\";\n// import Moralis from \"moralis/types\";\n// import '../public/config/the-nftist.webflow.css'\n// import './styles/the-nftist.webflow.css'\n// import Background from \"./images/PTRNS.png\";\n\nconst truncate = (input, len) =>\n  input.length > len ? `${input.substring(0, len)}...` : input;\n\n\n\nfunction App() {\n\n  const { authenticate, isAuthenticated, user, Moralis } = useMoralis();\n\n\n  // if (isAuthenticated) \n  //   {\n  //     console.log(\"you are authenticated\")\n  //     console.log(Moralis.User.current())\n\n\n  //   }\n\n\n  const Whitelist = Moralis.Object.extend(\"whiteList\")\n\n\n\n\n\n\n\n\n  const dispatch = useDispatch();\n  const blockchain = useSelector((state) => state.blockchain);\n  const data = useSelector((state) => state.data);\n  const [claimingNft, setClaimingNft] = useState(false);\n  const [feedback, setFeedback] = useState(`Click buy to mint your NFT.`);\n  const [mintAmount, setMintAmount] = useState(1);\n  const [numberWhiteListed, setWhitelisted] = useState(1);\n  const [CONFIG, SET_CONFIG] = useState({\n    CONTRACT_ADDRESS: \"\",\n    SCAN_LINK: \"\",\n    NETWORK: {\n      NAME: \"\",\n      SYMBOL: \"\",\n      ID: 0,\n    },\n    NFT_NAME: \"\",\n    SYMBOL: \"\",\n    MAX_SUPPLY: 1,\n    WEI_COST: 0,\n    DISPLAY_COST: 0,\n    GAS_LIMIT: 0,\n    MARKETPLACE: \"\",\n    MARKETPLACE_LINK: \"\",\n    SHOW_BACKGROUND: false,\n  });\n\n  const claimNFTs = () => {\n    let cost = CONFIG.WEI_COST;\n    let gasLimit = CONFIG.GAS_LIMIT;\n    let totalCostWei = String(cost * mintAmount);\n    let totalGasLimit = String(gasLimit * mintAmount);\n    console.log(\"Cost: \", totalCostWei);\n    console.log(\"Gas limit: \", totalGasLimit);\n    setFeedback(`Minting your ${CONFIG.NFT_NAME}...`);\n    setClaimingNft(true);\n    blockchain.smartContract.methods\n      .mint(mintAmount)\n      .send({\n        gasLimit: String(totalGasLimit),\n        to: CONFIG.CONTRACT_ADDRESS,\n        from: blockchain.account,\n        value: totalCostWei,\n      })\n      .once(\"error\", (err) => {\n        console.log(err);\n        setFeedback(\"Sorry, something went wrong please try again later.\");\n        setClaimingNft(false);\n      })\n      .then((receipt) => {\n        console.log(receipt);\n        setFeedback(\n          `WOW, the ${CONFIG.NFT_NAME} is yours! go visit Opensea.io to view it.`\n        );\n        setClaimingNft(false);\n        dispatch(fetchData(blockchain.account));\n      });\n  };\n\n  const decrementMintAmount = () => {\n    let newMintAmount = mintAmount - 1;\n    if (newMintAmount < 1) {\n      newMintAmount = 1;\n    }\n    setMintAmount(newMintAmount);\n  };\n\n  const checkIfWhiteListed = async() => {\n    // console.log((blockchain.account))\n    const query = new Moralis.Query(Whitelist)\n    query.equalTo(\"whiteListAddress\", \"xxxx\")\n    const result = await query.find();\n\n    console.log(result)\n    console.log(result.length)\n    // if(result.length != 0)\n    //   return 0;\n    // else\n    //   return 1;\n    setWhitelisted(result.length)\n  }\n\n  const incrementMintAmount = () => {\n    let newMintAmount = mintAmount + 1;\n    if (newMintAmount > 10) {\n      newMintAmount = 10;\n    }\n    setMintAmount(newMintAmount);\n  };\n\n  const getData = () => {\n    if (blockchain.account !== \"\" && blockchain.smartContract !== null) {\n      dispatch(fetchData(blockchain.account));\n    }\n  };\n\n  const getConfig = async () => {\n    const configResponse = await fetch(\"/config/config.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    });\n    const config = await configResponse.json();\n    SET_CONFIG(config);\n  };\n\n  useEffect(() => {\n    getConfig();\n  }, []);\n\n  useEffect(() => {\n    getData();\n  }, [blockchain.account]);\n\n  return (\n   <div>\n     x\n   </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}